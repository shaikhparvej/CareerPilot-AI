// const {
//   GoogleGenerativeAI,
//   HarmCategory,
//   HarmBlockThreshold,
// } = require("@google/generative-ai");

// const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
// const genAI = new GoogleGenerativeAI(apiKey);

// const model = genAI.getGenerativeModel({
//   model: "gemini-1.5-flash",
// });

// const generationConfig = {
//   temperature: 1,
//   topP: 0.95,
//   topK: 64,
//   maxOutputTokens: 8192,
//   responseMimeType: "application/json",
// };

// export const GenerateRoadMap = model.startChat({
//   generationConfig,
//   history: [
//     {
//       role: "user",
//       parts: [
//         {
//           text: "Create a comprehensive roadmap for mastering reactjs including the following details: 1) Key milestones and timelines. 2) Required resources (books, tools, software). 3) Potential challenges and strategies to overcome them. 4) Actionable steps and task breakdown. 5) Recommendations for relevant websites, free certification courses, and top YouTube channels. Structure the roadmap clearly, prioritizing efficiency and effectiveness. Provide all details in JSON format.",
//         },
//       ],
//     },
//     {
//       role: "model",
//       parts: [
//         {
//           text: '```json\n{\n  "roadmap": {\n    "title": "Mastering React.js",\n    "description": "A comprehensive roadmap to becoming proficient in React.js development.",\n    "milestones": [\n      {\n        "title": "Fundamentals",\n        "timeline": "2-4 weeks",\n        "description": "Understanding the core concepts of React.js and building basic applications.",\n        "tasks": [\n          {\n            "name": "Learn JavaScript fundamentals",\n            "description": "Master core JavaScript concepts like functions, arrays, objects, DOM manipulation, and asynchronous programming.",\n            "resources": [\n              {\n                "type": "Book",\n                "title": "Eloquent JavaScript",\n                "author": "Marijn Haverbeke",\n                "link": "https://eloquentjavascript.net/"\n              },\n              {\n                "type": "Website",\n                "title": "MDN Web Docs",\n                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript"\n              },\n              {\n                "type": "YouTube Channel",\n                "title": "Traversy Media",\n                "link": "https://www.youtube.com/channel/UC29ju8bIPH5f40Yz1RJRA3g"\n              }\n            ]\n          },\n          {\n            "name": "Understand React.js concepts",\n            "description": "Learn about JSX, components, props, state, lifecycle methods, and virtual DOM.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "React.js Documentation",\n                "link": "https://reactjs.org/"\n              },\n              {\n                "type": "Book",\n                "title": "React in Action",\n                "author": "Mark Erikson",\n                "link": "https://www.manning.com/books/react-in-action"\n              },\n              {\n                "type": "YouTube Channel",\n                "title": "Fun Fun Function",\n                "link": "https://www.youtube.com/channel/UCsBjURr4nSrO-R-q8J43b9A"\n              }\n            ]\n          },\n          {\n            "name": "Build basic React.js apps",\n            "description": "Create simple applications like a to-do list, a calculator, and a weather app.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "Create React App",\n                "link": "https://create-react-app.dev/"\n              },\n              {\n                "type": "Online Course",\n                "title": "React - The Complete Guide (incl Hooks, Redux, React Router, Testing)",\n                "platform": "Udemy",\n                "link": "https://www.udemy.com/course/react-the-complete-guide-incl-redux/"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "title": "Advanced Concepts",\n        "timeline": "4-6 weeks",\n        "description": "Mastering advanced concepts like hooks, state management, routing, and testing.",\n        "tasks": [\n          {\n            "name": "Learn about React Hooks",\n            "description": "Understand the different types of hooks (useState, useEffect, useContext, etc.) and how to use them effectively.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "React Hooks Documentation",\n                "link": "https://reactjs.org/docs/hooks-intro.html"\n              },\n              {\n                "type": "YouTube Channel",\n                "title": "Dev Ed",\n                "link": "https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q"\n              }\n            ]\n          },\n          {\n            "name": "Implement state management solutions",\n            "description": "Explore different state management libraries like Redux, Context API, and Zustand.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "Redux Documentation",\n                "link": "https://redux.js.org/"\n              },\n              {\n                "type": "Website",\n                "title": "Zustand Documentation",\n                "link": "https://zustand.js.org/"\n              },\n              {\n                "type": "YouTube Channel",\n                "title": "The Net Ninja",\n                "link": "https://www.youtube.com/user/TheNetNinja"\n              }\n            ]\n          },\n          {\n            "name": "Implement routing with React Router",\n            "description": "Learn how to create single-page applications using React Router and manage navigation between different pages.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "React Router Documentation",\n                "link": "https://reactrouter.com/docs/en/v6"\n              },\n              {\n                "type": "Online Course",\n                "title": "React Router 6: The Complete Guide",\n                "platform": "Udemy",\n                "link": "https://www.udemy.com/course/react-router-6-the-complete-guide/"\n              }\n            ]\n          },\n          {\n            "name": "Learn about testing React components",\n            "description": "Master different testing techniques, such as unit testing, integration testing, and end-to-end testing.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "React Testing Library",\n                "link": "https://testing-library.com/docs/react-testing-library/intro/"\n              },\n              {\n                "type": "Website",\n                "title": "Jest Documentation",\n                "link": "https://jestjs.io/docs/en/getting-started"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "title": "Real-World Applications",\n        "timeline": "6-8 weeks",\n        "description": "Building complex applications with React.js, integrating APIs, and using advanced libraries.",\n        "tasks": [\n          {\n            "name": "Build a full-stack application",\n            "description": "Combine React.js with a backend technology like Node.js, Express, or Python (Django/Flask) to create a complete web application.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "Express.js Documentation",\n                "link": "https://expressjs.com/"\n              },\n              {\n                "type": "Online Course",\n                "title": "The Complete Node.js Developer Course (3rd Edition)",\n                "platform": "Udemy",\n                "link": "https://www.udemy.com/course/the-complete-nodejs-developer-course-3rd-edition/"\n              }\n            ]\n          },\n          {\n            "name": "Integrate APIs",\n            "description": "Learn how to fetch data from external APIs and display it in your React.js applications.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "Axios Documentation",\n                "link": "https://axios-http.com/docs/api_intro"\n              },\n              {\n                "type": "Website",\n                "title": "Fetch API Documentation",\n                "link": "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"\n              }\n            ]\n          },\n          {\n            "name": "Explore and use popular libraries",\n            "description": "Familiarize yourself with libraries like Material-UI, React Bootstrap, and React Query for styling, components, and data fetching.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "Material-UI Documentation",\n                "link": "https://mui.com/material-ui/"\n              },\n              {\n                "type": "Website",\n                "title": "React Bootstrap Documentation",\n                "link": "https://react-bootstrap.github.io/"\n              },\n              {\n                "type": "Website",\n                "title": "React Query Documentation",\n                "link": "https://tanstack.com/query/v4/"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "title": "Advanced Topics",\n        "timeline": "Optional - Ongoing",\n        "description": "Exploring advanced React.js concepts, performance optimization, and best practices.",\n        "tasks": [\n          {\n            "name": "Learn about React Server Components",\n            "description": "Understand the benefits of using React Server Components for faster rendering and better SEO.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "React Server Components",\n                "link": "https://nextjs.org/docs/app/building-your-application/rendering/server-components"\n              },\n              {\n                "type": "YouTube Channel",\n                "title": "ReactJS Academy",\n                "link": "https://www.youtube.com/channel/UCRQ4u3Xw_m_w5qX1rM5sT6g"\n              }\n            ]\n          },\n          {\n            "name": "Master performance optimization",\n            "description": "Learn techniques for optimizing React applications for faster performance and better user experience.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "React Performance Optimization",\n                "link": "https://reactjs.org/docs/optimizing-performance.html"\n              },\n              {\n                "type": "Book",\n                "title": "React.js Performance",\n                "author": "Benjamin I. Williams",\n                "link": "https://www.amazon.com/React-js-Performance-Optimizing-Applications/dp/1838827579/"\n              }\n            ]\n          },\n          {\n            "name": "Deepen understanding of React patterns",\n            "description": "Explore various design patterns commonly used in React, like Higher Order Components, Render Props, and Hooks.",\n            "resources": [\n              {\n                "type": "Website",\n                "title": "React Patterns",\n                "link": "https://reactpatterns.com/"\n              },\n              {\n                "type": "Book",\n                "title": "React Design Patterns and Best Practices",\n                "author": "Adam Freeman",\n                "link": "https://www.manning.com/books/react-design-patterns-and-best-practices"\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    "resources": [\n      {\n        "type": "Software",\n        "title": "Visual Studio Code",\n        "link": "https://code.visualstudio.com/"\n      },\n      {\n        "type": "Software",\n        "title": "Chrome DevTools",\n        "link": "https://developer.chrome.com/docs/devtools/"\n      }\n    ],\n    "challenges": [\n      {\n        "description": "Understanding complex concepts like hooks, state management, and routing.",\n        "strategy": "Break down concepts into smaller parts, use visual aids and examples, and practice regularly."\n      },\n      {\n        "description": "Debugging React applications.",\n        "strategy": "Utilize developer tools, read error messages carefully, and use debugging techniques like console logs and breakpoints."\n      },\n      {\n        "description": "Keeping up with the ever-changing React ecosystem.",\n        "strategy": "Follow official documentation, subscribe to blogs and newsletters, and attend conferences and workshops."\n      }\n    ],\n    "websites": [\n      {\n        "title": "React.js Documentation",\n        "link": "https://reactjs.org/"\n      },\n      {\n        "title": "Create React App",\n        "link": "https://create-react-app.dev/"\n      },\n      {\n        "title": "React Patterns",\n        "link": "https://reactpatterns.com/"\n      }\n    ],\n    "certificationCourses": [\n      {\n        "title": "React.js Fundamentals",\n        "platform": "freeCodeCamp",\n        "link": "https://www.freecodecamp.org/learn/front-end-libraries/react/"\n      },\n      {\n        "title": "The Complete React Developer Course",\n        "platform": "Udemy",\n        "link": "https://www.udemy.com/course/react-the-complete-guide-incl-redux/"\n      }\n    ],\n    "youtubeChannels": [\n      {\n        "title": "Traversy Media",\n        "link": "https://www.youtube.com/channel/UC29ju8bIPH5f40Yz1RJRA3g"\n      },\n      {\n        "title": "Fun Fun Function",\n        "link": "https://www.youtube.com/channel/UCsBjURr4nSrO-R-q8J43b9A"\n      },\n      {\n        "title": "Dev Ed",\n        "link": "https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q"\n      },\n      {\n        "title": "The Net Ninja",\n        "link": "https://www.youtube.com/user/TheNetNinja"\n      },\n      {\n        "title": "ReactJS Academy",\n        "link": "https://www.youtube.com/channel/UCRQ4u3Xw_m_w5qX1rM5sT6g"\n      }\n    ]\n  }\n}\n```\n\nThis roadmap provides a structured approach to learning React.js. Remember to adapt it based on your learning style and pace, and focus on applying your knowledge through building projects.',
//         },
//       ],
//     },
//   ],
// });

const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

export const AiNotesSection = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'Generate interview preparation notes material in detail content for each chapter, Make sure to includes all topic point in the content, make sure to give content in HTML format and style (Do not Add HTML, Head, Body, title tag), The chapters:{\n"chapterTitle": "Introduction to Python",\n"chapterSummary": "This chapter provides a foundational understanding of Python syntax, data types, and basic operations.  It covers enough to get you started writing simple programs and solving basic algorithmic problems.",\n"topics": [\n"Setting up your Python environment",\n"Basic Syntax (variables, operators)",\n"Data types (integers, floats, strings, booleans)",\n"Input and Output operations",\n"Basic control flow (if-else statements)",\n"Loops (for and while loops)",\n"Simple data structures (lists, tuples)"\n]\n},',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```html\n<div style="font-family: sans-serif; line-height: 1.6; margin: 20px;">\n  <h1 style="color: #333; font-size: 2em; margin-bottom: 1em;">Introduction to Python</h1>\n  <p style="font-size: 1.1em; color: #555;">This chapter provides a foundational understanding of Python syntax, data types, and basic operations. It covers enough to get you started writing simple programs and solving basic algorithmic problems.</p>\n\n  <section style="margin-bottom: 2em;">\n    <h2 style="color: #333; font-size: 1.5em; margin-top: 1.5em;">Setting up your Python Environment</h2>\n    <ul style="list-style-type: disc; margin-left: 20px;">\n      <li><strong>Download Python:</strong> Download the latest Python 3.x version from <a href="https://www.python.org/downloads/" target="_blank" style="color:#007bff; text-decoration:underline;">python.org/downloads/</a>. Choose the installer appropriate for your operating system (Windows, macOS, Linux).</li>\n      <li><strong>Installation:</strong> Run the installer and follow the on-screen instructions.  Ensure you select the option to add Python to your PATH environment variable (crucial for easy command-line access).</li>\n      <li><strong>Verify Installation:</strong> Open your terminal or command prompt. Type <code>python --version</code> and press Enter.  A successful installation will display the Python version number.</li>\n      <li><strong>Choose an IDE/Text Editor:</strong> Select a suitable Integrated Development Environment (IDE) or text editor. Popular choices include:\n        <ul style="list-style-type: square; margin-left: 30px;">\n          <li><strong>VS Code:</strong> Free, versatile, highly customizable with extensions.</li>\n          <li><strong>PyCharm:</strong> Powerful IDE, both free community and professional editions available.</li>\n          <li><strong>Sublime Text:</strong> Lightweight and fast text editor with Python support via plugins.</li>\n          <li><strong>Atom:</strong> Another customizable and open-source text editor.</li>\n        </ul>\n      </li>\n      <li><strong>Virtual Environments (Recommended):</strong> Use virtual environments (<code>venv</code>) to isolate project dependencies.  This prevents conflicts between different projects.  Learn how to create and activate virtual environments using the command line (e.g., <code>python3 -m venv myenv</code> and <code>source myenv/bin/activate</code> on Linux/macOS, <code>myenv\\Scripts\\activate</code> on Windows).</li>\n    </ul>\n  </section>\n\n\n  <section style="margin-bottom: 2em;">\n    <h2 style="color: #333; font-size: 1.5em; margin-top: 1.5em;">Basic Syntax (Variables & Operators)</h2>\n    <ul style="list-style-type: disc; margin-left: 20px;">\n      <li><strong>Variables:</strong> Python uses dynamic typing.  No explicit declaration is needed.  Variable names follow snake_case convention (e.g., <code>my_variable</code>). Examples:\n        <pre style="background-color:#f0f0f0; padding:10px; border-radius:5px;">\n          <code>\nmy_integer = 10\nmy_float = 3.14\nmy_string = "Hello"\nmy_boolean = True\n          </code>\n        </pre>\n      </li>\n      <li><strong>Operators:</strong>\n        <ul style="list-style-type: square; margin-left: 30px;">\n          <li><strong>Arithmetic:</strong> +, -, *, /, // (floor division), % (modulo), ** (exponentiation)</li>\n          <li><strong>Comparison:</strong> ==, !=, >, <, >=, <=</li>\n          <li><strong>Logical:</strong> and, or, not</li>\n          <li><strong>Assignment:</strong> =, +=, -=, *=, /=</li>\n        </ul>\n      </li>\n      <li><strong>Operator Precedence:</strong>  PEMDAS/BODMAS rules apply. Parentheses can override precedence.</li>\n      <li><strong>Type Conversion:</strong>  Use functions like <code>int()</code>, <code>float()</code>, <code>str()</code> to convert between data types.</li>\n    </ul>\n  </section>\n\n  <section style="margin-bottom: 2em;">\n    <h2 style="color: #333; font-size: 1.5em; margin-top: 1.5em;">Data Types</h2>\n    <ul style="list-style-type: disc; margin-left: 20px;">\n      <li><strong>Integers (<code>int</code>):</strong> Whole numbers (e.g., 10, -5, 0)</li>\n      <li><strong>Floating-Point Numbers (<code>float</code>):</strong> Numbers with decimal points (e.g., 3.14, -2.5)</li>\n      <li><strong>Strings (<code>str</code>):</strong> Sequences of characters (e.g., "Hello", \'Python\').  Use single or double quotes.  Common methods: <code>upper()</code>, <code>lower()</code>, <code>strip()</code>, <code>split()</code>, <code>join()</code>, slicing (e.g., <code>my_string[0:5]</code>).</li>\n      <li><strong>Booleans (<code>bool</code>):</strong> <code>True</code> or <code>False</code></li>\n      <li><strong>Type Checking:</strong> Use the <code>type()</code> function to check the data type of a variable.</li>\n    </ul>\n  </section>\n\n  <section style="margin-bottom: 2em;">\n    <h2 style="color: #333; font-size: 1.5em; margin-top: 1.5em;">Input and Output</h2>\n    <ul style="list-style-type: disc; margin-left: 20px;">\n      <li><strong>Input:</strong> The <code>input()</code> function reads user input from the console.  It always returns a string.  Example:\n        <pre style="background-color:#f0f0f0; padding:10px; border-radius:5px;">\n          <code>\nname = input("Enter your name: ")\nprint("Hello,", name)\n          </code>\n        </pre>\n      </li>\n      <li><strong>Output:</strong> The <code>print()</code> function displays output to the console.  Use f-strings for formatted output. Example:\n        <pre style="background-color:#f0f0f0; padding:10px; border-radius:5px;">\n          <code>\nage = 30\nprint(f"Your age is: {age}")\n          </code>\n        </pre>\n      </li>\n    </ul>\n  </section>\n\n  <section style="margin-bottom: 2em;">\n    <h2 style="color: #333; font-size: 1.5em; margin-top: 1.5em;">Control Flow (if-else Statements)</h2>\n    <ul style="list-style-type: disc; margin-left: 20px;">\n      <li><strong><code>if</code>, <code>elif</code>, <code>else</code>:</strong>  Use these keywords to create conditional branches in your code. Example:\n        <pre style="background-color:#f0f0f0; padding:10px; border-radius:5px;">\n          <code>\nx = 10\nif x > 5:\n  print("x is greater than 5")\nelif x == 5:\n  print("x is equal to 5")\nelse:\n  print("x is less than 5")\n          </code>\n        </pre>\n      </li>\n      <li><strong>Nested <code>if</code> statements:</strong>  Place <code>if</code> statements inside other <code>if</code> statements for more complex conditions.</li>\n      <li><strong>Ternary Operator:</strong> A concise way to write simple conditional expressions:  <code>result = value1 if condition else value2</code></li>\n    </ul>\n  </section>\n\n  <section style="margin-bottom: 2em;">\n    <h2 style="color: #333; font-size: 1.5em; margin-top: 1.5em;">Loops (<code>for</code> and <code>while</code> loops)</h2>\n    <ul style="list-style-type: disc; margin-left: 20px;">\n      <li><strong><code>for</code> loop:</strong> Iterates over a sequence (list, tuple, string, range). Example:\n        <pre style="background-color:#f0f0f0; padding:10px; border-radius:5px;">\n          <code>\nmy_list = [1, 2, 3, 4, 5]\nfor item in my_list:\n  print(item)\n          </code>\n        </pre>\n      </li>\n      <li><strong><code>range()</code> function:</strong> Generates a sequence of numbers.  <code>range(start, stop, step)</code></li>\n      <li><strong><code>while</code> loop:</strong> Repeats a block of code as long as a condition is true.  Be cautious about infinite loops! Example:\n        <pre style="background-color:#f0f0f0; padding:10px; border-radius:5px;">\n          <code>\ncount = 0\nwhile count < 5:\n  print(count)\n  count += 1\n          </code>\n        </pre>\n      </li>\n      <li><strong><code>break</code> and <code>continue</code> statements:</strong> Control the flow of loops. <code>break</code> exits the loop; <code>continue</code> skips to the next iteration.</li>\n      <li><strong>Nested loops:</strong> Loops inside other loops.</li>\n    </ul>\n  </section>\n\n  <section style="margin-bottom: 2em;">\n    <h2 style="color: #333; font-size: 1.5em; margin-top: 1.5em;">Simple Data Structures (Lists & Tuples)</h2>\n    <ul style="list-style-type: disc; margin-left: 20px;">\n      <li><strong>Lists (<code>list</code>):</strong> Ordered, mutable (changeable) sequences.  Defined using square brackets <code>[]</code>.  Methods: <code>append()</code>, <code>insert()</code>, <code>remove()</code>, <code>pop()</code>, <code>index()</code>, <code>sort()</code>, <code>reverse()</code>, slicing.</li>\n      <li><strong>Tuples (<code>tuple</code>):</strong> Ordered, immutable (unchangeable) sequences. Defined using parentheses <code>()</code>.  More memory-efficient than lists if you don\'t need to modify the sequence.</li>\n      <li><strong>List Comprehension:</strong> A concise way to create lists. Example: <code>squares = [x**2 for x in range(10)]</code></li>\n      <li><strong>Tuple Unpacking:</strong> Assigning values from a tuple to multiple variables simultaneously. Example: <code>a, b, c = (1, 2, 3)</code></li>\n    </ul>\n  </section>\n</div>\n```\n',
        },
      ],
    },
  ],
});
